---
format: html
html-table-processing: none
---

## Stock Tables

Define a function to pull price data on AI-focused stocks from Yahoo Finance.

```{python}
import polars as pl
import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta

# Define tickers
tickers = ['NVDA', 'MSFT', 'GOOGL', 'META', 'AMZN', 'AMD', 'PLTR', 'AI', 'PATH', 'SOUN']

def get_stock_data(target_date=None):
    # Use the provided target date or default to today
    if target_date is None:
        end_date = datetime.now()
    else:
        end_date = datetime.strptime(target_date, '%Y-%m-%d')
    
    start_date = end_date - timedelta(days=7)

    data = {
        'company': [],
        'ticker': [],
        'market_cap_b': [],
        'focus': [],
    }
    
    focus_dict = {
        'NVDA': 'AI chips, GPU computing',
        'MSFT': 'Cloud AI, machine learning',
        'GOOGL': 'AI research, search, cloud',
        'META': 'Social AI, metaverse',
        'AMZN': 'AWS AI services',
        'AMD': 'AI processors',
        'PLTR': 'AI-powered analytics',
        'AI': 'Enterprise AI software',
        'PATH': 'AI automation',
        'SOUN': 'Voice AI technology'
    }
    
    # Initialize empty lists for each day's prices
    price_dates = []
    
    for ticker in tickers:
        # Get current info
        stock = yf.Ticker(ticker)
        info = stock.info
        
        # Get historical data
        hist = stock.history(start=start_date, end=end_date)
        
        # Store the dates if we haven't already
        if not price_dates:
            price_dates = hist.index.strftime('%Y-%m-%d').tolist()
            for date in price_dates:
                data[f'price_{date}'] = []
        
        # Store basic info
        data['company'].append(info.get('longName', ticker))
        data['ticker'].append(ticker)
        data['market_cap_b'].append(float(info.get('marketCap', 0)) / 1e9)
        data['focus'].append(focus_dict[ticker])
        
        # Store prices for each day
        for date in price_dates:
            try:
                # Get the price for this date from historical data
                price = float(hist.loc[date, 'Close'])
            except:
                # If price not available, use the previous known price or 0
                price = float(0)
            data[f'price_{date}'].append(price)
        
        # Add current price with date
        current_price_date = end_date.strftime('%Y-%m-%d')
        if f'price_{current_price_date}' not in data:
            data[f'price_{current_price_date}'] = []
        data[f'price_{current_price_date}'].append(float(info.get('regularMarketPrice', 0)))
    
    df = pd.DataFrame(data)
    
    # Sort the columns to ensure prices are in chronological order
    price_cols = [col for col in df.columns if col.startswith('price_')]
    other_cols = [col for col in df.columns if not col.startswith('price_')]
    df = df[other_cols + sorted(price_cols)]
    
    return df
```


```{python}
from great_tables import GT, md, style, loc, nanoplot_options
import polars as pl
import polars.selectors as cs

df = get_stock_data(target_date="2025-01-27")

price_cols = [col for col in df.columns if col.startswith('price_')]
price_labels = {col: col.replace('price_', '') for col in price_cols}

column_labels = {
    'company': 'Company',
    'ticker': 'Ticker',
    'market_cap_b': 'Market Cap',
    **price_labels
}

price_cols = [col for col in df.columns if col.startswith('price_')]
price_widths = {col: "200px" for col in price_cols}

column_widths = {
    'company': "300px",
    'ticker': "80px",
    'market_cap_b': "100px",
    **price_widths
}

focus_data = df[['company', 'focus']]
focus_string = "; ".join([f"{row['company']}: {row['focus']}" for _, row in focus_data.iterrows()])

pl_df = pl.from_pandas(df).with_columns(trend=pl.concat_list(cs.starts_with("price")))

gt_tbl = ( 
    GT(pl_df)
    .cols_hide(columns="focus")
    .fmt_currency(columns=cs.starts_with("price"))
    .fmt_currency(columns="market_cap_b", use_subunits=False, pattern="{x}B")
    .tab_spanner(label="Price History", columns=cs.starts_with("price"))
    .cols_label(**column_labels)
    .cols_width(**column_widths)
    .opt_stylize(style=1, color="green", add_row_striping=False)
    .tab_header(
        title=md("Impact of **DeepSeek-R1** on AI-focused Stocks"),
        subtitle=md("The DeepSeek model was released on January 20, 2025 but major price action on AI-focused stocks occurred days later on January 27 (highlighted in <span style='color: steelblue; weight: bold;'>blue</span>).")
    )
    .opt_align_table_header(align="left")
    .tab_source_note(md(f"Focus areas for each company:<br> {focus_string}"))
    .fmt_nanoplot(columns="trend", options=nanoplot_options(show_data_points=False))
)

gt_tbl
```


## Step-by-step

Obtain a fresh pull of the data and inspect the DataFrame.

```{python}
import polars as pl

df = get_stock_data(target_date="2025-01-27")

pl_df = pl.from_pandas(df)
```

Concatenate all of the `price_*` columns to a new list column.

```{python}
import polars.selectors as cs

pl_df = pl_df.with_columns(trend=pl.concat_list(cs.starts_with("price")))
```

Have a first look at the table in Great Tables.

```{python}
from great_tables import GT

GT(pl_df)
```

Issues:

- the `focus` column seems out of place here, should be removed
- numbers need to be formatted
- the column labels need to be presentable, right now they aren't great to read
- it would be interesting to have a small plot showing price history in addition to the individual prices (to show the trend)
- a spanner should be use to unify the columns of the price data

Let's hide the `focus` column since it doesn't add very much to the presentation here (and could potentially make the column quite wide).

```{python}


gt_table = (
    GT(pl_df)
    .cols_hide(columns="focus")
)

gt_table
```

Now, we should format those prices and the `market_cap_b` column. That can be done with `fmt_currency()`.

```{python}

gt_table = (
    gt_table
    .fmt_currency(columns=cs.starts_with("price"))
    .fmt_currency(columns="market_cap_b", use_subunits=False, pattern="{x}B")
)

gt_table
```

Add a spanner label called 'Price History' to better show which columns contain the stock prices.

```{python}

gt_table = (
    gt_table
    .tab_spanner(label="Price History", columns=cs.starts_with("price"))
)

gt_table
```

Modify the column labels (currently inherited from the column names) so that they read better.

```{python}

# Generate the column labels dictionary
price_cols = [col for col in df.columns if col.startswith('price_')]
price_labels = {col: col.replace('price_', '') for col in price_cols}

# Add the other column labels
column_labels = {
    'company': 'Company',
    'ticker': 'Ticker',
    'market_cap_b': 'Market Cap',
    **price_labels
}

gt_table = (
    gt_table
    .cols_label(**column_labels)
)

gt_table
```

Modify the column widths so that everything looks nicely proportioned.

```{python}

# Generate the column widths dictionary for price columns
price_cols = [col for col in df.columns if col.startswith('price_')]
price_widths = {col: "200px" for col in price_cols}

# Add the other column widths
column_widths = {
    'company': "300px",
    'ticker': "80px",
    'market_cap_b': "100px",
    **price_widths
}

# Apply the column widths to the gt_table
gt_table = (
    gt_table
    .cols_width(**column_widths)
)

gt_table
```

Apply a preset theme to the table with `opt_stylize()`.

```{python}
gt_table = (
    gt_table
    .opt_stylize(style=1, color="green", add_row_striping=False)
)

gt_table
```

Add an informative title and subtitle to convey the purpose of the table. This is done with the `tab_header()` method.

```{python}
from great_tables import md

gt_table = (
    gt_table
    .tab_header(
        title=md("Impact of **DeepSeek-R1** on AI-focused Stocks"),
        subtitle=md("The DeepSeek model was released on January 20, 2025 but major price action on AI-focused stocks occurred days later on January 27 (highlighted in <span style='color: steelblue; weight: bold;'>blue</span>).")
    )
    .opt_align_table_header(align="left")
)

gt_table
```

While the `focus` column was omitted from the table, that information could be repurposed to fit nicely in the table footer. Here we extract that data from the DataFrame and create a single string. The `tab_source_note()` method lets us put that text into the table footer area.

```{python}
# Extract the focus data from the original DataFrame
focus_data = df[['company', 'focus']]

# Create a single string in the format "(company): (focus text); ..."
focus_string = "; ".join([f"{row['company']}: {row['focus']}" for _, row in focus_data.iterrows()])

# Add the focus string as a source note in the table
gt_table = (
    gt_table
    .tab_source_note(
        md(f"Focus areas for each company:<br> {focus_string}")
    )
)

gt_table
```


```{python}
from great_tables import nanoplot_options

gt_table = (
    gt_table
    .fmt_nanoplot(columns="trend", options=nanoplot_options(show_data_points=False))
)

gt_table
```